# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when a release is created
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of `ECR_REPOSITORY` in the workflow below with your repository's name.
#    Replace the value of `aws-region` in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the values for `service` and `cluster` in the workflow below with your service and cluster names.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of `task-definition` in the workflow below with your JSON file's name.
#    Replace the value of `container-name` in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

on:
  push:
    paths:
    - '**/server/ascenda/**'
    - '**/tests/**'
    branches: [ main ]
  pull_request:
    branches: [ main ]

name: Deploy to Amazon ECS

jobs:

  pre_job:
    name: Initiation Check
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
      should_deploy-file_handling: ${{ steps.changed_files.outputs.ascenda-file_handling == 'true' }}
      should_deploy-exchange_rate: ${{ steps.changed_files.outputs.ascenda-exchange_rate == 'true' }}
      should_deploy-loyalty: ${{ steps.changed_files.outputs.ascenda-loyalty == 'true' }}
      should_deploy-polling: ${{ steps.changed_files.outputs.ascenda-polling == 'true' }}
      should_deploy-transaction: ${{ steps.changed_files.outputs.ascenda-transaction == 'true' }}
    steps:

    - name: Skip Workflow Check
      id: skip_check
      uses: fkirc/skip-duplicate-actions@master
      with:
        cancel_others: 'true'
        concurrent_skipping: 'always'

    - name: Checkout
      uses: actions/checkout@v2

    - name: Verify Changed files
      id: changed_files
      uses: dorny/paths-filter@v2
      with:
        filters: |
          # server:
          #   - 'server/**'
          ascenda-file_handling:
            - 'server/ascenda/file_handling/**'
          ascenda-exchange_rate:
           - 'server/ascenda/exchange_rate/**'
          ascenda-loyalty:
            - 'server/ascenda/loyalty/**'
          ascenda-polling:
            - 'server/ascenda/polling/**'
          ascenda-transaction:
            - 'server/ascenda/transaction/**'
    
    - name: flake8 Lint
      uses: py-actions/flake8@v1
      # if: ${{ steps.changed_files.outputs.server == 'true' }}


  deploy-file_handling:
    name: Deploy FileHandling Service in FileHandling Cluster
    needs: pre_job
    if: ${{ needs.pre_job.outputs.should_skip != 'true' && needs.pre_job.outputs.should_deploy-file_handling == 'true' }}
    runs-on: ubuntu-latest
    steps:

    - name: Checkout
      uses: actions/checkout@v2

    # AWS
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # SERVICE
    - name: Build, tag, and push image to Amazon ECR [file_handling]
      id: build-file_handling-image
      env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: file_handling
          IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR so that it can be deployed to ECS.
        cd server/ascenda/file_handling
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:latest"

    - name: Create cluster if do not exist [file_handling]
      continue-on-error: true
      run: |
        aws ecs create-cluster --region us-east-1 --cluster-name file_handling-cluster

    - name: Create service if non-existent [file_handling]
      continue-on-error: true
      run: |
        aws ecs create-service --region us-east-1 --cluster file_handling-cluster --service-name file_handling-service --task-definition file_handling --desired-count 1 --launch-type "FARGATE" --network-configuration "awsvpcConfiguration={subnets=[subnet-011126a15d4118ab2],securityGroups=[sg-04ceaf462b4dbd50c]}"

    - name: Download task definition [file_handling]
      run: |
        aws ecs describe-task-definition --task-definition file_handling --query taskDefinition > file_handling-taskdef.json

    - name: Fill in the new image ID in the Amazon ECS task definition [file_handling]
      id: file_handling-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: file_handling-taskdef.json
        container-name: file_handling_container
        image: ${{ steps.build-file_handling-image.outputs.image }}

    - name: Deploy Amazon ECS task definition [file_handling]
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.file_handling-task-def.outputs.task-definition }}
        service: file_handling-service
        cluster: file_handling-cluster
        wait-for-service-stability: true


  deploy-exchange_rate:
    name: Deploy ExchangeRate Service in Loyalty Cluser
    needs: pre_job
    if: ${{ needs.pre_job.outputs.should_skip != 'true' && needs.pre_job.outputs.should_deploy-exchange_rate == 'true' }}
    runs-on: ubuntu-latest
    steps:

    - name: Checkout
      uses: actions/checkout@v2

    # AWS
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # SERVICE
    - name: Build, tag, and push image to Amazon ECR [exchange_rate]
      id: build-exchange_rate-image
      env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: exchange_rate
          IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR so that it can be deployed to ECS.
        cd server/ascenda/exchange_rate
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:latest"

    - name: Create cluster if do not exist [exchange_rate]
      continue-on-error: true
      run: |
        aws ecs create-cluster --region us-east-1 --cluster-name loyalty-cluster

    - name: Create service if non-existent [exchange_rate]
      continue-on-error: true
      run: |
        aws ecs create-service --region us-east-1 --cluster loyalty-cluster --service-name exchange_rate-service --task-definition exchange_rate --desired-count 1 --launch-type "FARGATE" --network-configuration "awsvpcConfiguration={subnets=[subnet-011126a15d4118ab2],securityGroups=[sg-04ceaf462b4dbd50c]}"

    - name: Download task definition [exchange_rate]
      run: |
        aws ecs describe-task-definition --task-definition exchange_rate --query taskDefinition > exchange_rate-taskdef.json

    - name: Fill in the new image ID in the Amazon ECS task definition [exchange_rate]
      id: exchange_rate-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: exchange_rate-taskdef.json
        container-name: exchange_rate_container
        image: ${{ steps.build-exchange_rate-image.outputs.image }}

    - name: Deploy Amazon ECS task definition [exchange_rate]
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.exchange_rate-task-def.outputs.task-definition }}
        service: exchange_rate-service
        cluster: loyalty-cluster
        wait-for-service-stability: true


  deploy-loyalty:
    name: Deploy Loyalty Service in Loyalty Cluster
    needs: pre_job
    if: ${{ needs.pre_job.outputs.should_skip != 'true' && needs.pre_job.outputs.should_deploy-loyalty == 'true' }}
    runs-on: ubuntu-latest
    steps:

    - name: Checkout
      uses: actions/checkout@v2

    # AWS
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # SERVICE
    - name: Build, tag, and push image to Amazon ECR [loyalty]
      id: build-loyalty-image
      env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: loyalty
          IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR so that it can be deployed to ECS.
        cd server/ascenda/loyalty
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:latest"

    - name: Create cluster if do not exist [loyalty]
      continue-on-error: true
      run: |
        aws ecs create-cluster --region us-east-1 --cluster-name loyalty-cluster

    - name: Create service if non-existent [loyalty]
      continue-on-error: true
      run: |
        aws ecs create-service --region us-east-1 --cluster loyalty-cluster --service-name loyalty-service --task-definition loyalty --desired-count 1 --launch-type "FARGATE" --network-configuration "awsvpcConfiguration={subnets=[subnet-011126a15d4118ab2],securityGroups=[sg-04ceaf462b4dbd50c]}"

    - name: Download task definition [loyalty]
      run: |
        aws ecs describe-task-definition --task-definition loyalty --query taskDefinition > loyalty-taskdef.json

    - name: Fill in the new image ID in the Amazon ECS task definition [loyalty]
      id: loyalty-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: loyalty-taskdef.json
        container-name: loyalty-container
        image: ${{ steps.build-loyalty-image.outputs.image }}

    - name: Deploy Amazon ECS task definition [loyalty]
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.loyalty-task-def.outputs.task-definition }}
        service: loyalty-service
        cluster: loyalty-cluster
        wait-for-service-stability: true


  deploy-polling:
    name: Deploy Polling Service in Polling Cluster
    needs: pre_job
    if: ${{ needs.pre_job.outputs.should_skip != 'true' && needs.pre_job.outputs.should_deploy-polling == 'true' }}
    runs-on: ubuntu-latest
    steps:

    - name: Checkout
      uses: actions/checkout@v2

    # AWS
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # SERVICE
    - name: Build, tag, and push image to Amazon ECR [polling]
      id: build-polling-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: polling
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR so that it can be deployed to ECS.
        cd server/ascenda/polling
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:latest"

    - name: Create cluster if do not exist [polling]
      continue-on-error: true
      run: |
        aws ecs create-cluster --region us-east-1 --cluster-name polling-cluster

    - name: Create service if non-existent [polling]
      continue-on-error: true
      run: |
        aws ecs create-service --region us-east-1 --cluster polling-cluster --service-name polling-service --task-definition polling --desired-count 1 --launch-type "FARGATE" --network-configuration "awsvpcConfiguration={subnets=[subnet-011126a15d4118ab2],securityGroups=[sg-04ceaf462b4dbd50c]}"

    - name: Download task definition [polling]
      run: |
        aws ecs describe-task-definition --task-definition polling-task --query taskDefinition > polling-taskdef.json

    - name: Fill in the new image ID in the Amazon ECS task definition [polling]
      id: polling-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: polling-taskdef.json
        container-name: polling-container
        image: ${{ steps.build-polling-image.outputs.image }}

    - name: Deploy Amazon ECS task definition [polling]
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.polling-task-def.outputs.task-definition }}
        service: polling-service
        cluster: polling-cluster
        wait-for-service-stability: true


  deploy-transaction:
    name: Deploy Transaction Service in Transaction Cluster
    needs: pre_job
    if: ${{ needs.pre_job.outputs.should_skip != 'true' && needs.pre_job.outputs.should_deploy-transaction == 'true' }}
    runs-on: ubuntu-latest
    steps:

    - name: Checkout
      uses: actions/checkout@v2

    # AWS
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # SERVICE
    - name: Build, tag, and push image to Amazon ECR [transaction]
      id: build-transaction-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: transaction
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR so that it can be deployed to ECS.
        cd server/ascenda/transaction
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:latest"

    - name: Create cluster if do not exist [transaction]
      continue-on-error: true
      run: |
        aws ecs create-cluster --region us-east-1 --cluster-name transaction-cluster

    - name: Create service if non-existent [transaction]
      continue-on-error: true
      run: |
        aws ecs create-service --region us-east-1 --cluster transaction-cluster --service-name transaction-service --task-definition transaction --desired-count 1 --launch-type "FARGATE" --network-configuration "awsvpcConfiguration={subnets=[subnet-011126a15d4118ab2],securityGroups=[sg-04ceaf462b4dbd50c]}"

    - name: Download task definition [transaction]
      run: |
        aws ecs describe-task-definition --task-definition transaction --query taskDefinition > transaction-taskdef.json

    - name: Fill in the new image ID in the Amazon ECS task definition [transaction]
      id: transaction-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: transaction-taskdef.json
        container-name: transaction-container
        image: ${{ steps.build-transaction-image.outputs.image }}

    - name: Deploy Amazon ECS task definition [transaction]
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.transaction-task-def.outputs.task-definition }}
        service: transaction-service
        cluster: transaction-cluster
        wait-for-service-stability: true


  test:
    name: Test
    if: always()
    needs: [deploy-file_handling, deploy-exchange_rate, deploy-loyalty, deploy-polling, deploy-transaction]
    runs-on: ubuntu-latest
    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - name: Run API Tests
      id: run-newman
      uses: anthonyvscode/newman-action@v1
      with:
        collection: tests/ascenda.postman_collection.json
        reporters: cli

    - name: API Tests Output summary to console
      run: echo ${{ steps.run-newman.outputs.summary }}
