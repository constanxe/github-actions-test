# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when a release is created
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of `ECR_REPOSITORY` in the workflow below with your repository's name.
#    Replace the value of `aws-region` in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the values for `service` and `cluster` in the workflow below with your service and cluster names.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of `task-definition` in the workflow below with your JSON file's name.
#    Replace the value of `container-name` in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

name: Deploy to Amazon ECS

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    # environment: development

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Verify Changed files
    - name: Verify Changed files
      id: changed_files
      uses: tj-actions/verify-changed-files@v5.5
      with:
        files: |
          server/ascenda/loyalty

    # AWS
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      if: steps.changed_files.outputs.files_changed == 'true'
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      if: steps.changed_files.outputs.files_changed == 'true'
      uses: aws-actions/amazon-ecr-login@v1

    # - name: Build, tag, and push image to Amazon ECR [bank]
    #   id: build-bank-image
    #   env:
    #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
    #     ECR_REPOSITORY: bank
    #     IMAGE_TAG: ${{ github.sha }}
    #   run: |
    #     # Build a docker container and
    #     # push it to ECR so that it can
    #     # be deployed to ECS.
    #     cd server/ascenda/bank
    #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
    #     docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
    #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
    #     echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:latest"
    - name: Build, tag, and push image to Amazon ECR [loyalty]
      id: build-loyalty-image
      if: contains(steps.changed_files.outputs.changed_files, 'server/ascenda/loyalty')
      env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ascenda
          IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        cd server/ascenda/loyalty
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:latest"

    # - name: Download task definition [bank]
    #   run: |
    #     aws ecs describe-task-definition --task-definition bank --query taskDefinition > bank-task-definition.json
    - name: Download task definition [loyalty]
      if: contains(steps.changed_files.outputs.changed_files, 'server/ascenda/loyalty')
      run: |
        aws ecs describe-task-definition --task-definition loyalty --query taskDefinition > loyalty-task-definition.json
    
    # - name: Fill in the new image ID in the Amazon ECS task definition [bank]
    #   id: bank-task-def
    #   uses: aws-actions/amazon-ecs-render-task-definition@v1
    #   with:
    #     task-definition: bank-task-definition.json
    #     container-name: bank-container
    #     image: ${{ steps.build-bank-image.outputs.image }}
    - name: Fill in the new image ID in the Amazon ECS task definition [loyalty]
      id: loyalty-task-def
      if: contains(steps.changed_files.outputs.changed_files, 'server/ascenda/loyalty')
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: loyalty-task-definition.json
        container-name: loyalty-container
        image: ${{ steps.build-loyalty-image.outputs.image }}

    # - name: Deploy Amazon ECS task definition [bank]
    #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
    #   with:
    #     task-definition: ${{ steps.bank-task-def.outputs.task-definition }}
    #     service: bank-service
    #     cluster: bank-cluster
    #     wait-for-service-stability: true
    - name: Deploy Amazon ECS task definition [loyalty]
      id: deploy-loyalty
      if: contains(steps.changed_files.outputs.changed_files, 'server/ascenda/loyalty')
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.loyalty-task-def.outputs.task-definition }}
        service: loyalty-service
        cluster: loyalty-cluster
        wait-for-service-stability: true


    # Tests
    - name: Run API Tests
      id: run-newman
      needs: deploy-loyalty
      uses: anthonyvscode/newman-action@v1
      with:
        collection: ITSA.postman_collection.json
        reporters: cli

    - name: Output summary to console
      run: echo ${{ steps.run-newman.outputs.summary }}
