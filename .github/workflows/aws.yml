# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when a release is created
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of `ECR_REPOSITORY` in the workflow below with your repository's name.
#    Replace the value of `aws-region` in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the values for `service` and `cluster` in the workflow below with your service and cluster names.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of `task-definition` in the workflow below with your JSON file's name.
#    Replace the value of `container-name` in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

name: Deploy to Amazon ECS

jobs:

  pre_job:
    name: Initiation check
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@master
        with:
          paths_ignore: '["**/README.md"]'
          do_not_skip: '["pull_request", "workflow_dispatch", "schedule"]'


  deploy:
    name: Deploy
    needs: pre_job
    if: ${{ needs.pre_job.outputs.should_skip != 'true' }}
    runs-on: ubuntu-latest
    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - name: Verify Changed files
      id: changed_files
      uses: dorny/paths-filter@v2
      with:
        filters: |
          aws:
            - 'server/ascenda/**'
          ascenda:
            - 'server/ascenda/**'
          ascenda-bank:
            - 'server/ascenda/bank/**'
          ascenda-exchange:
            - 'server/ascenda/exchange_rate/**'
          ascenda-loyalty:
            - 'server/ascenda/loyalty/**'
          ascenda-transaction:
            - 'server/ascenda/transaction/**'

    # AWS
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      # if: steps.changed_files.outputs.aws == 'true'
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      # if: steps.changed_files.outputs.aws == 'true'
      uses: aws-actions/amazon-ecr-login@v1

    # SERVICES

    # # file handling
    # - name: Build, tag, and push image to Amazon ECR [file_handling]
    #   id: build-file_handling-image
    #   # if: steps.changed_files.outputs.ascenda-file_handling == 'true'
    #   env:
    #       ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
    #       ECR_REPOSITORY: file_handling
    #       IMAGE_TAG: ${{ github.sha }}
    #   run: |
    #     # Build a docker container and push it to ECR so that it can be deployed to ECS.
    #     cd server/ascenda/file_handling
    #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
    #     docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
    #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
    #     echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:latest"

    # - name: Download task definition [file_handling]
    #   # if: steps.changed_files.outputs.ascenda-file_handling == 'true'
    #   run: |
    #     aws ecs describe-task-definition --task-definition file_handling --query taskDefinition > task-definitions/file_handling-taskdef.json

    # - name: Fill in the new image ID in the Amazon ECS task definition [file_handling]
    #   id: file_handling-task-def
    #   # if: steps.changed_files.outputs.ascenda-file_handling == 'true'
    #   uses: aws-actions/amazon-ecs-render-task-definition@v1
    #   with:
    #     task-definition: task-definitions/file_handling-taskdef.json
    #     container-name: file_handling-container
    #     image: ${{ steps.build-file_handling-image.outputs.image }}

    # - name: Deploy Amazon ECS task definition [file_handling]
    #   # if: steps.changed_files.outputs.ascenda-file_handling == 'true'
    #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
    #   with:
    #     task-definition: ${{ steps.file_handling-task-def.outputs.task-definition }}
    #     service: file_handling
    #     cluster: file-handling-cluster
    #     wait-for-service-stability: true


    # # polling
    # - name: Build, tag, and push image to Amazon ECR [polling]
    #   id: build-polling-image
    #   # if: steps.changed_files.outputs.ascenda-polling == 'true'
    #   env:
    #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
    #     ECR_REPOSITORY: polling
    #     IMAGE_TAG: ${{ github.sha }}
    #   run: |
    #     # Build a docker container and push it to ECR so that it can be deployed to ECS.
    #     cd server/ascenda/polling
    #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
    #     docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
    #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
    #     echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:latest"

    # - name: Download task definition [polling]
    #   # if: steps.changed_files.outputs.ascenda-polling == 'true'
    #   run: |
    #     aws ecs describe-task-definition --task-definition polling --query taskDefinition > task-definitions/polling-taskdef.json

    # - name: Fill in the new image ID in the Amazon ECS task definition [polling]
    #   id: polling-task-def
    #   # if: steps.changed_files.outputs.ascenda-polling == 'true'
    #   uses: aws-actions/amazon-ecs-render-task-definition@v1
    #   with:
    #     task-definition: task-definitions/polling-taskdef.json
    #     container-name: polling-container
    #     image: ${{ steps.build-polling-image.outputs.image }}

    # - name: Deploy Amazon ECS task definition [polling]
    #   # if: steps.changed_files.outputs.ascenda-polling == 'true'
    #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
    #   with:
    #     task-definition: ${{ steps.polling-task-def.outputs.task-definition }}
    #     service: polling-service
    #     cluster: polling-cluster
    #     wait-for-service-stability: true


    # OK

    # # bank
    # - name: Build, tag, and push image to Amazon ECR [bank]
    #   id: build-bank-image
    #   # if: steps.changed_files.outputs.ascenda-bank == 'true'
    #   env:
    #       ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
    #       ECR_REPOSITORY: bank
    #       IMAGE_TAG: ${{ github.sha }}
    #   run: |
    #     # Build a docker container and push it to ECR so that it can be deployed to ECS.
    #     cd server/ascenda/bank
    #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
    #     docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
    #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
    #     echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:latest"

    # - name: Download task definition [bank]
    #   # if: steps.changed_files.outputs.ascenda-bank == 'true'
    #   run: |
    #     aws ecs describe-task-definition --task-definition bank --query taskDefinition > task-definitions/bank-taskdef.json

    # - name: Fill in the new image ID in the Amazon ECS task definition [bank]
    #   id: bank-task-def
    #   # if: steps.changed_files.outputs.ascenda-bank == 'true'
    #   uses: aws-actions/amazon-ecs-render-task-definition@v1
    #   with:
    #     task-definition: task-definitions/bank-taskdef.json
    #     container-name: bank-container
    #     image: ${{ steps.build-bank-image.outputs.image }}

    # - name: Deploy Amazon ECS task definition [bank]
    #   # if: steps.changed_files.outputs.ascenda-bank == 'true'
    #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
    #   with:
    #     task-definition: ${{ steps.bank-task-def.outputs.task-definition }}
    #     service: bank
    #     cluster: bank-cluster
    #     wait-for-service-stability: true


    # # loyalty
    # - name: Build, tag, and push image to Amazon ECR [loyalty]
    #   id: build-loyalty-image
    #   # if: steps.changed_files.outputs.ascenda-loyalty == 'true'
    #   env:
    #       ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
    #       ECR_REPOSITORY: loyalty
    #       IMAGE_TAG: ${{ github.sha }}
    #   run: |
    #     # Build a docker container and push it to ECR so that it can be deployed to ECS.
    #     cd server/ascenda/loyalty
    #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
    #     docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
    #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
    #     echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:latest"

    # - name: Download task definition [loyalty]
    #   # if: steps.changed_files.outputs.ascenda-loyalty == 'true'
    #   run: |
    #     aws ecs describe-task-definition --task-definition loyalty --query taskDefinition > task-definitions/loyalty-taskdef.json

    # - name: Fill in the new image ID in the Amazon ECS task definition [loyalty]
    #   id: loyalty-task-def
    #   # if: steps.changed_files.outputs.ascenda-loyalty == 'true'
    #   uses: aws-actions/amazon-ecs-render-task-definition@v1
    #   with:
    #     task-definition: task-definitions/loyalty-taskdef.json
    #     container-name: loyalty-container
    #     image: ${{ steps.build-loyalty-image.outputs.image }}

    # - name: Deploy Amazon ECS task definition [loyalty]
    #   # if: steps.changed_files.outputs.ascenda-loyalty == 'true'
    #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
    #   with:
    #     task-definition: ${{ steps.loyalty-task-def.outputs.task-definition }}
    #     service: loyalty-service
    #     cluster: loyalty-cluster
    #     wait-for-service-stability: true


    # transaction
    - name: Build, tag, and push image to Amazon ECR [transaction]
      id: build-transaction-image
      # if: steps.changed_files.outputs.ascenda-transaction == 'true'
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: transaction
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR so that it can be deployed to ECS.
        cd server/ascenda/transaction
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:latest"

    - name: Download task definition [transaction]
      # if: steps.changed_files.outputs.ascenda-transaction == 'true'
      run: |
        aws ecs describe-task-definition --task-definition transaction --query taskDefinition > task-definitions/transaction-taskdef.json

    - name: Fill in the new image ID in the Amazon ECS task definition [transaction]
      id: transaction-task-def
      # if: steps.changed_files.outputs.ascenda-transaction == 'true'
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definitions/transaction-taskdef.json
        container-name: transaction-container
        image: ${{ steps.build-transaction-image.outputs.image }}

    - name: Deploy Amazon ECS task definition [transaction]
      # if: steps.changed_files.outputs.ascenda-transaction == 'true'
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.transaction-task-def.outputs.task-definition }}
        service: transaction-service
        cluster: transaction-cluster
        wait-for-service-stability: true


  test:
    name: Test
    needs: deploy
    runs-on: ubuntu-latest
    steps:

    - name: Run API Tests
      id: run-newman
      uses: anthonyvscode/newman-action@v1
      with:
        collection: ITSA.postman_collection.json
        reporters: cli

    - name: API Tests Output summary to console
      run: echo ${{ steps.run-newman.outputs.summary }}